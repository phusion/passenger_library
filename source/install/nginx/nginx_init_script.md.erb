---
title: Creating an Nginx init script
section: install
---
<%
locals.merge!(INTEGRATION_MODE_NGINX)
globals.merge!(INTEGRATION_MODE_NGINX)
content_for(:sidebar) do
  render_partial("../sidebar.html", locals: locals.merge(
    limit_choices: { "intmode" => [INTEGRATION_MODE_NGINX] }
  ))
end
%>

# Creating an Nginx init script

If you installed Nginx with one of the generic installation methods ([source tarball](install/oss/tarball/) or [RubyGems](install/oss/rubygems_rvm/)) then you [won't have an init script](install/oss/tarball/#note_about_nginx) to start, stop and restart Nginx with.

A bare Nginx installation works with signals: you start it by invoking it from the command line, you stop it by sending SIGTERM to it and you gracefully restart it by sending SIGHUP to it. This is described in the section ["Using Nginx"](install/oss/tarball/#using_nginx) in one of the installation guides.

If you prefer to use an init script then please refer to the following resources:

 * [Init script for Ubuntu](https://www.linode.com/docs/websites/nginx/websites-with-nginx-on-ubuntu-12-04-lts-precise-pangolin/)
 * [Init script for Red Hat, Fedora and CentOS](https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/)

When using one of those init scripts, please make sure that the paths inside the init script are correct. In particular, the paths to the Nginx binary, to the PID file and to the configuration file must match the actual locations of your Nginx installation.
