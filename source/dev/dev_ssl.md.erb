---
title: Using SSL with Passenger in Development
section: dev
---
<%

  content_for(:sidebar) do
    render_partial("sidebar.html", locals: locals)
  end
%>
<h1>Using SSL with Passenger in development</h1>

It is a good idea to have your development environment be as close to your production environment as possible, without getting in your way. For example setting up SSL in your development environment helps you to fix mixed content warnings so there are no surprises when you move to staging or production, and doesn't train you to click through SSL warnings in your browser.

<% if locals[:integration_mode_type] == :standalone %>
If you already have a production SSL certificate, this could be achieved as simply as starting passenger with:
<pre class="highlight bash"><span class="prompt">$ </span>passenger start --ssl --environment development --ssl-certificate <span class="si">/path/to/certificate.pem</span> --ssl-certificate-key <span class="si">/path/to/key.pem</span> --port 443</pre>
However that approach has some downsides, your production certificate and secret key are sitting on an actively used box which makes them easier to steal, you need a production certificate before you are even done your development work, you need to edit your hosts file every time you start a new site, and you need to edit your hosts file again any time you want to access the production website once it is published.
<% end %>

This walkthrough will show you how to create, trust, and install a self signed certificate in your development web server, and setup your DNS to redirect all your development traffic back to your development box.

<div>
  <p><strong>Table of contents</strong></p>
  <ol class="toc-container"><li>Loading...</li></ol>
</div>

## Prepare the System

Assumptions: you are using the Bash shell, have admin rights to your computer, and are using Firefox, Chrome, or Safari. Ensure that OpenSSL, Passenger, Dnsmasq, and optionally Nginx or Apache are installed.

Follow <%= link_to "these instructions", "/install/#{locals[:integration_mode_type]}/install/index.html" %> to install Passenger; you may have to adjust the settings to your desired config, for example using Passenger Enterprise or OSS.

<table class="table table-bordered table-striped">
  <tr>
    <td>
      Debian, Ubuntu
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>sudo apt-get update
<span class="prompt">$ </span>sudo apt-get upgrade -y
<span class="prompt">$ </span>sudo apt-get install -y openssl dnsmasq
<% if locals[:integration_mode_type] == :apache %>
<span class="prompt">$ </span>sudo apt-get install -y apache2
<span class="prompt">$ </span>sudo a2enmod ssl
<% elsif locals[:integration_mode_type] == :nginx %>
<span class="prompt">$ </span>sudo apt-get install -y nginx
<% end %>
</pre>
    </td>
  </tr>
  <tr>
    <td>
      Red Hat, CentOS, Fedora, Amazon Linux, Scientific Linux
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>sudo yum update -y
<span class="prompt">$ </span>sudo yum install -y openssl dnsmasq openssl-perl
<% if locals[:integration_mode_type] == :apache %>
<span class="prompt">$ </span>sudo yum install -y httpd24 mod24_ssl
<% elsif locals[:integration_mode_type] == :nginx %>
<span class="prompt">$ </span>sudo yum install -y nginx
<% end %>
</pre>
    </td>
  </tr>
  <tr>
    <td>
      Mac OS X
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>sudo softwareupdate -i -a
<span class="prompt">$ </span>brew update
<span class="prompt">$ </span>brew upgrade
<span class="prompt">$ </span>brew install openssl passenger dnsmasq
<% if locals[:integration_mode_type] == :apache %>
<span class="prompt">$ </span>sed -E -i.bak -e <span class="s">'s|#(LoadModule ssl_.*)|\1|'</span> /etc/apache2/httpd.conf
<% elsif locals[:integration_mode_type] == :nginx %>
<span class="prompt">$ </span>brew install nginx
<% end %>
</pre>
    </td>
  </tr>
</table>

### Software versions used in this article:

To check the versions of the packages you have installed you can use the following commands:

<table class="table table-bordered table-striped">
  <thead>
    <th>
      Application
    </th>
    <th>
      Version
    </th>
    <th>
      Linux Command
    </th>
    <th>
      Mac Command
    </th>
  </thead>
  <tr>
    <td>
      OpenSSL
    </td>
    <td>
      1.0.2h
    </td>
    <td colspan="2">
      <pre class="highlight bash"><span class="prompt">$ </span>openssl version</pre>
    </td>
  </tr>
  <tr>
    <td>
      Passenger
    </td>
    <td>
      5.0.29
    </td>
    <td colspan="2">
      <pre class="highlight bash"><span class="prompt">$ </span>passenger -v</pre>
    </td>
  </tr>
<% if locals[:integration_mode_type] == :nginx %>
  <tr>
    <td>
      Nginx
    </td>
    <td>
      1.10.1
    </td>
    <td colspan="2">
      <pre class="highlight bash"><span class="prompt">$ </span>nginx -v</pre>
    </td>
  </tr>
<% elsif locals[:integration_mode_type] == :apache %>
  <tr>
    <td>
      Apache
    </td>
    <td>
      2.4.18
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>httpd -v || apache2 -v</pre>
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>httpd -v</pre>
    </td>
  </tr>
<% end %>
  <tr>
    <td>
      Dnsmasq
    </td>
    <td>
      2.76
    </td>
    <td colspan="2">
      <pre class="highlight bash"><span class="prompt">$ </span>dnsmasq -v</pre>
    </td>
  </tr>
  <tr>
    <td>
      Firefox
    </td>
    <td>
      47.0.1
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>firefox -v</pre>
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>/Applications/Firefox.app/Contents/MacOS/firefox -v</pre>
    </td>
  </tr>
  <tr>
    <td>
      Chrome
    </td>
    <td>
      51.0.2704.&#42;
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>google-chrome --version</pre>
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>/Applications/Chrome.app/Contents/MacOS/Google\ Chrome --version</pre>
    </td>
  </tr>
  <tr>
    <td>
      Safari
    </td>
    <td>
      9.1.1
    </td>
    <td>
      <pre>N/A</pre>
    </td>
    <td>
      <pre class="highlight bash"><span class="prompt">$ </span>echo `system_profiler -xml SPApplicationsDataType | xmllint --xpath \
<span class="s">"//dict[string='Safari']/key[.='version']/following-sibling::&#42;[1]/text()"</span> -`</pre>
    </td>
  </tr>
</table>

## OpenSSL Configuration

When setting up a development environment with SSL it is better practice to use a self signed certificate, and leave your real certificate/key pair somewhere safe and encrypted, preferably on offline storage like a thumb drive in a safe place. In order to create a certificate that works and makes development convenient, you need to edit the `openssl.cnf` file.

On OS X this is located at `/usr/local/etc/openssl/openssl.cnf` or if it isn't there you can copy `/usr/local/etc/openssl/openssl.cnf.default` to that path as a starting point, and edit from there.

On linux it may be in one of the following locations: `/usr/local/ssl/openssl.cnf` `/usr/lib/ssl/openssl.cnf` `/etc/ssl/openssl.cnf` `/etc/pki/tls/openssl.cnf`

The changes you need to make are as follows:

### uncomment these lines, they enable needed functionality:
<pre class="highlight"><code><span class="gd">#</span> unique_subject = no <span class="c"># allows you to recreate the cert if needed</span>
<span class="gd">#</span> copy_extensions = copy <span class="c"># allows you to have many domains</span>
<span class="gd">#</span> req_extensions = v3_req <span class="c"># allows you to have many domains</span>
<span class="gd">#</span> keyUsage = nonRepudiation, digitalSignature, keyEncipherment <span class="c"># makes cert work with modern browsers</span>
<span class="gd">#</span> keyUsage = cRLSign, keyCertSign <span class="c"># makes cert work with modern browsers</span>
</code></pre>

### comment out these lines, they add nothing and get in the way:
~~~
attributes                      = req_attributes
[ req_attributes ]
challengePassword               = A challenge password
challengePassword_min           = 4
challengePassword_max           = 20
unstructuredName                = An optional company name
~~~

### and modify the following values as indicated:
<pre class="highlight">default_days = <span class="gi">3650</span> <span class="c"># there's no reason to have to redo this every year, set to 10</span>
default_md = <span class="gi">sha256</span> <span class="c"># default in openssl 1.1.0, needed for modern browsers</span>
</pre>

### modify the following values as desired:
<pre class="highlight conf"><code>countryName_default             = <span class="si">NL</span> <span class="c"># two letter country code</span>
stateOrProvinceName_default     = <span class="si">North Holland</span> <span class="c"># name of province or state</span>
localityName_default            = <span class="si">Amsterdam</span> <span class="c"># name of city</span>
0.organizationName_default      = <span class="si">ACME Inc</span> <span class="c"># name of organization</span>
organizationalUnitName_default  = <span class="si">Certificate Services</span> <span class="c"># name of department</span>
commonName_default              = <span class="si">example.dev</span> <span class="c"># your main domain</span>
emailAddress_default            = <span class="si">admin@example.dev</span> <span class="c"># your email</span>
</code></pre>

### specify all your development domains
add the following on a new line under `keyUsage = nonRepudiation, digitalSignature, keyEncipherment`:
<pre class="highlight conf"><code>subjectAltName = @alt_names
[alt_names]
<span class="si">DNS.1 = localhost</span>
<span class="si">DNS.2 = example.dev</span>
<span class="si">DNS.3 = example2.dev</span>
<span class="si">DNS.4 = *.example1.dev</span>
<span class="si">IP.1 = 127.0.0.1</span>
<span class="si">IP.2 = ::1</span>
# add as many more domains, and IPs as you want
</code></pre>

Using a separate top level domain (TLD) for development allows you to access the production site at the proper url, while having easy access to your development sites. This guide will use `.dev` and will go into more detail about how to set this up below in the [DNS section](#configure-dns).

While no browser accepts wildcard certificates for entire top level domains, if you are developing a large number of micro services or sites that share a domain and have added a wildcard for the domain to the list of alt names in the certificate, then you can simply add more sites to your setup without changing your certificate and by using [mass deployment](<%= url_for "/deploy/standalone/mass_deployment.html" %>) you don't have to modify your web server or app server configs to spin up another site, simply create it in the correct directory.

### A working sample is provided below
Replace occurrences of example.dev with your own domain:

~~~conf
HOME			= .
RANDFILE		= $ENV::HOME/.rnd
oid_section		= new_oids
[ new_oids ]
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7
[ ca ]
default_ca	= CA_default		# The default ca section
[ CA_default ]
dir		= ./demoCA		# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
crl_dir		= $dir/crl		# Where the issued crl are kept
database	= $dir/index.txt	# database index file.
unique_subject	= no			# Set to 'no' to allow creation of
new_certs_dir	= $dir/newcerts		# default place for new certs.
certificate	= $dir/cacert.pem       # The CA certificate
serial		= $dir/serial           # The current serial number
crlnumber	= $dir/crlnumber	# the current crl number
crl		= $dir/crl.pem          # The current CRL
private_key	= $dir/private/cakey.pem# The private key
RANDFILE	= $dir/private/.rand	# private random number file
x509_extensions	= usr_cert		# The extensions to add to the cert
name_opt        = ca_default		# Subject Name options
cert_opt        = ca_default		# Certificate field options
copy_extensions = copy
default_days	= 3650			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= sha256		# which md to use.
preserve	= no			# keep passed DN ordering
policy		= policy_match
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional
[ req ]
default_bits		= 4096
default_keyfile         = privkey.pem
distinguished_name	= req_distinguished_name
x509_extensions	= v3_ca	# The extensions to add to the self signed cert
string_mask = utf8only
req_extensions = v3_req # The extensions to add to a certificate request
[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= NL
countryName_min			= 2
countryName_max			= 2
stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= North Holland
localityName			= Locality Name (eg, city)
localityName_default            = Amsterdam
0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= My Company
organizationalUnitName		= Organizational Unit Name (eg, section)
organizationalUnitName_default	= Certificate Services
commonName			= Common Name (e.g. server FQDN or YOUR name)
commonName_max			= 64
commonName_default              = www.example.dev
emailAddress			= Email Address
emailAddress_max		= 64
emailAddress_default            = info@example.dev
[ usr_cert ]
basicConstraints=CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
nsComment			= "OpenSSL Generated Certificate"
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName          = @alt_names
[alt_names]
DNS.1 = localhost
DNS.2 = example.dev
DNS.3 = example2.dev
DNS.4 = *.example1.dev
IP.1 = 127.0.0.1
IP.2 = ::1
[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
keyUsage = cRLSign, keyCertSign
[ crl_ext ]
authorityKeyIdentifier=keyid:always
[ proxy_cert_ext ]
basicConstraints=CA:FALSE
nsComment			= "OpenSSL Generated Certificate"
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo
[ tsa ]
default_tsa = tsa_config1	# the default TSA section
[ tsa_config1 ]
dir		= ./demoCA		# TSA root directory
serial		= $dir/tsaserial	# The current serial number (mandatory)
crypto_device	= builtin		# OpenSSL engine to use for signing
signer_cert	= $dir/tsacert.pem      # The TSA signing certificate
certs		= $dir/cacert.pem	# Certificate chain to include in reply
signer_key	= $dir/private/tsakey.pem # The TSA private key (optional)
default_policy	= tsa_policy1		# Policy if request did not specify it
other_policies	= tsa_policy2, tsa_policy3	# acceptable policies (optional)
digests		= md5, sha1		# Acceptable message digests (mandatory)
accuracy	= secs:1, millisecs:500, microsecs:100	# (optional)
clock_precision_digits  = 0	# number of digits after dot. (optional)
ordering		= yes	# Is ordering defined for timestamps?
tsa_name		= yes	# Must the TSA name be included in the reply?
ess_cert_id_chain	= no	# Must the ESS cert id chain be included?
~~~

### Add CA.pl to your path:
<table class="table table-bordered table-striped">
  <tr>
    <td>
      Debian, Ubuntu
    </td>
    <td>
      <pre class="highlight shell"><code><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/lib/ssl/misc</code></pre>
    </td>
  </tr>
  <tr>
    <td>
      Red Hat, CentOS, Fedora, Amazon Linux, Scientific Linux
    </td>
    <td>
      <pre class="highlight shell"><code><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/etc/pki/tls/misc</code></pre>
    </td>
  </tr>
  <tr>
    <td>
      Mac OS X
    </td>
    <td>
      <pre class="highlight shell"><code><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/etc/openssl/misc</code></pre>
    </td>
  </tr>
</table>

## Create Your Certificate Authority
The changes you made to `openssl.cnf` will allow the certificates produced with your CA to be accepted by modern browsers. You can hold enter/return to accept the default values for each question you get asked by the script, with the exception of the passphrase which must be at least 4 characters long.

<pre class="highlight"><span class="prompt">$ </span>mkdir <span class="si">~/certs</span>
<span class="prompt">$ </span>cd <span class="si">~/certs</span>
<span class="prompt">$ </span>CA.pl -newca</pre>

### Trust your new certificate authority root certificate:

The previous command will have created a new subdirectory called demoCA, you’ll need to install the certificate authority root certificate from the new demoCA dir into your system keychain (and/or Firefox) to prevent your browser from warning you about broken SSL.

<table class="table table-bordered table-striped">
  <tr>
    <td>
      Mac OS X with Safari or Chrome:
    </td>
    <td>
      <pre class="highlight"><span class="prompt">$ </span>sudo /usr/bin/security add-trusted-cert -d -r trustRoot -k \
/Library/Keychains/System.keychain <span class="si">~/certs/demoCA/cacert.pem</span></pre>
    </td>
  </tr>
  <tr>
    <td>
      Debian, Ubuntu with Chrome:
    </td>
    <td>
      <pre class="highlight"><span class="prompt">$ </span>sudo cp <span class="si">~/certs/demoCA/cacert.pem</span> /usr/local/share/ca-certificates/myCA.crt
<span class="prompt">$ </span>sudo dpkg-reconfigure ca-certificates</pre>
    </td>
  </tr>
  <tr>
    <td>
      Fedora 19+, RHEL/CentOS 7+ Chrome:
    </td>
    <td>
      <pre class="highlight"><span class="prompt">$ </span>sudo cp <span class="si">~/certs/demoCA/cacert.pem</span> /etc/pki/ca-trust/source/anchors/
<span class="prompt">$ </span>sudo update-ca-trust
<span class="prompt">$ </span>sudo update-ca-trust enable <span class="c">&#35; RHEL/CentOS 6 only since: </span><a href="https://rhn.redhat.com/errata/RHEA-2013-1596.html">RHEA-2013-1596</a></pre>
    </td>
  </tr>
  <tr>
    <td>
      Any OS with Firefox:
    </td>
    <td>
      <pre>open preferences
click advanced tab
click certificates tab
click “view certificates”
click “import…”
pick <span class="si">~/certs/demoCA/cacert.pem</span> file
In the Downloading Certificate window check "Trust this CA to identify web sites."
click "OK"</pre>
    </td>
  </tr>
  <tr>
    <td>
      Any *nix OS with Curl:
    </td>
    <td>
      Pass the <code>--cacert</code> flag to curl when you use it to query your website.
      <pre class="highlight"><span class="prompt">$ </span>curl --cacert <span class="si">~/certs/demoCA/cacert.pem</span> <span class="s">'https://example.dev'</span></pre>
    </td>
  </tr>
</table>

### create the new server certificate/key pair:
You can accept all the defaults, as you already customized them earlier.
<pre class="highlight"><span class="prompt">$ </span>cd <span class="si">~/certs</span>
<span class="prompt">$ </span>CA.pl -newreq-nodes
<span class="prompt">$ </span>CA.pl -sign</pre>

## Configure Passenger <%= locals[:integration_mode_name_as_passenger_suffix] %>
Replace `example.dev` with your domain, and set the paths to your app and the certificate/key pair you created:

<% if locals[:integration_mode_type] == :apache %>
~~~apache
<VirtualHost *:80>
    Redirect permanent / https://www.example.dev/
    ServerName example.dev
    ServerAlias www.example.dev
</VirtualHost>

<VirtualHost *:443>
    ServerName example.dev
    ServerAlias www.example.dev
    SSLCertificateFile "/etc/apache2/server.crt"
    SSLCertificateKeyFile "/etc/apache2/server.key"
    PassengerAppRoot "/path/to/app"
    DocumentRoot "/path/to/app/public"
    ErrorLog "/var/log/apache2/example.dev-error_log"
    CustomLog "/var/log/apache2/example.dev-access_log" common
    <Directory "/path/to/app/public">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
    PassengerEnv development
    SSLEngine on
    SSLProtocol all -SSLv2 -SSLv3
    SSLHonorCipherOrder on
    SSLCipherSuite HIGH
    SSLCompression off # not all versions of Apache+OpenSSL allow this option
    Header always edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
</VirtualHost>
~~~
<% elsif locals[:integration_mode_type] == :nginx %>
Generate the Diffie-Hellman parameters file using this command:
<pre class ="highlight bash"><span class="prompt">$ </span>openssl dhparam -out <span class="si">/path/to/dhparam.pem</span> 2048</pre>
~~~nginx
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    return 301 https://$host$request_uri;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    root /var/www/example.dev/public;
    passenger_app_root /var/www/example.dev;
    server_name example.dev;
    ssl_certificate /usr/local/etc/nginx/ssl/server.crt;
    ssl_certificate_key /usr/local/etc/nginx/ssl/server.key;
    ssl_dhparam /usr/local/etc/nginx/ssl/dhparam.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH;
    add_header Strict-Transport-Security max-age=31536000;
    passenger_enabled on;
    passenger_app_env development;
}
~~~
<% else %>
<pre class="highlight"><span class="prompt">$ </span>passenger start --ssl --daemonize --environment development --ssl-certificate \
<span class="si">~/certs/newcert.pem</span> --ssl-certificate-key <span class="si">~/certs/newkey.pem</span> --port 443</pre>
<% end %>

## Configure DNS

Since you need the domain you visit in your browser to match the SSL certificate, you still need to direct all your development traffic back to localhost. One option is to edit your hosts file (located at `/etc/hosts`) and add entries to redirect each development domain back to your computer. That solution works*, but doesn't scale well. Next I'll describe setting up Dnsmasq & configuring your own top level domain in order to save having to edit the hosts file repeatedly.

*Note some older versions of OS X actually ignored entries in the hosts file for new top level domains (for example: `.dev` stopped working once Google started responding to DNS queries for that top level domain. Google owns `.dev`, but they've stated it's for internal use only, so you're unlikely to break anything if you use it, unless you work for Google), which makes using a DNS resolver like Dnsmasq all the more useful, because you workaround that bug.

<table class="table table-bordered table-striped">
  <tr>
    <td>
      In Ubuntu 12.10+ use NetworkManager's Dnsmasq:
    </td>
    <td>
      <pre class="highlight"><span class="prompt">$ </span>sudo mkdir -p /etc/NetworkManager/dnsmasq.d
<span class="prompt">$ </span>sudo echo <span class="s">'address=/dev/127.0.0.1'</span> &gt; /etc/NetworkManager/dnsmasq.d/dev-TLD
<span class="prompt">$ </span>sudo service network-manager restart <span class="c"># (Ubuntu 12.10)</span>
<span class="prompt">$ </span>sudo service dnsmasq restart <span class="c"># (Ubuntu &gt; 13.04)</span></pre>
    </td>
  </tr>
  <tr>
    <td>
      Other Linux:
    </td>
    <td>
      <pre class="highlight">
<span class="prompt">$ </span>sudo echo <span class="s">'address=/dev/127.0.0.1'</span> &gt; /etc/dnsmasq.d/dev-TLD
<span class="prompt">$ </span>prepend domain-name-servers 127.0.0.1
<span class="prompt">$ </span>sudo service NetworkManager restart
<span class="prompt">$ </span>sudo service dnsmasq start</pre>
    </td>
  </tr>
  <tr>
    <td>
      OS X:
    </td>
    <td>
      <pre class="highlight">
<span class="prompt">$ </span>echo <span class="s">'address=/dev/127.0.0.1'</span> &gt;&gt; `brew --prefix`/etc/dnsmasq.conf
<span class="prompt">$ </span>sudo cp `brew --prefix dnsmasq`/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons/
<span class="prompt">$ </span>sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
<span class="prompt">$ </span>sudo mkdir -p /etc/resolver
<span class="prompt">$ </span>sudo echo <span class="s">'nameserver 127.0.0.1'</span> &gt; /etc/resolver/dev</pre>
    </td>
  </tr>
</table>

## Done

Now if you restart your webserver, SSL should be working and your browser shouldn't complain when you visit your app over https.
