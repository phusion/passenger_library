---
title: 'Preparing a sample application - Passenger + Meteor basics'
section: basics
subsection: preparing_sample_app
sidebar: toc.html
---
# Preparing a sample application

<p class="lead">Throughout the rest of this basics tutorial, we will demonstrate Passenger's basic features through a sample Meteor application. In this step we will show you how to create this sample application.</p>

## Create the app

Let us create an example Meteor app directory structure in your home directory. We use the builtin Meteor leaderboard example app. If you have already done this as part of the [quickstart](../../start/meteor.html), feel free to skip to ["Create an app package"](#create-an-app-package).

<pre class="highlight"><span class="prompt">$ </span>cd ~
<span class="prompt">$ </span>meteor create --example leaderboard
<span class="prompt">$ </span>cd leaderboard</pre>

## Create an app package

In the previous step, you only created a Meteor app in development mode. In this tutorial, we also need a *packaged* version of your Meteor sample app. A packaged Meteor app contains the Meteor runtime and various other necessary things for running a Meteor app in production. Some Passenger features are only compatible with packaged Meteor apps.

<p>
    In order to provide you appropriate instructions, please choose your Meteor version: <%= render_partial("/shared/meteor_picker.html") %>
</p>

Inside the `leaderboard` directory, use the <code class="meteor v13">meteor bundle</code><code class="meteor v14 v16">meteor build</code> command to create a package tarball.

<pre class="highlight meteor v14 v16"><span class="prompt">$ </span>meteor build --server-only ../leaderboard-package</pre>
<pre class="highlight meteor v13"><span class="prompt">$ </span>meteor bundle package.tar.gz</pre>

<%= render_partial("/shared/meteor_package_note.html") %>

<span class="meteor v13">The packaged app has now been placed in `package.tar.gz`. But Passenger expects a directory, so let us extract it in <code>../leaderboard-package</code>:</span>

<pre class="highlight meteor v13"><span class="prompt">$ </span>mkdir ../leaderboard-package
<span class="prompt">$ </span>cd ../leaderboard-package
<span class="prompt">$ </span>tar xzf ../leaderboard/package.tar.gz</pre>
<pre class="highlight meteor v14 v16"><span class="prompt">$ </span>cd ../leaderboard-package
<span class="prompt">$ </span>tar xzf *.tar.gz</pre>

The packaged app directory doesn't contain any dependencies, so we need to install them. Run:

<pre class="highlight"><span class="prompt">$ </span>cd bundle/programs/server
<span class="prompt">$ </span>npm install</pre>

Finally, return to the original `leaderboard` app directory:

<pre class="highlight"><span class="prompt">$ </span>cd ~/leaderboard-package/bundle</pre>

<div class="info">
  <h3 class="notoc">Meteor package and MongoDB</h3>
  <p>
    During development, the Meteor runtime takes care of starting MongoDB for you. MongoDB is the database engine that Meteor uses.
  </p>
  <p>
    But a packaged Meteor app does not start MongoDB for you. Instead, a packaged Meteor app expects that MongoDB is already running somewhere, and that you tell the app where that MongoDB instance is. In the <a href="process_management.html">Process management</a> section we will show you how to run MongoDB separately and how to tell your app where MongoDB is.
  </p>
</div>

## Next step

Next, we will introduce you to the `passenger` command, which starts your app in Passenger.

<a href="passenger_command.html" class="btn btn-primary btn-lg">Continue &raquo;</a>
