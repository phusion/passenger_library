<%
if !needs_install_passenger?(locals)
  raise "walkthroughs/deploy/deploy_app/_nginx_instructions.md.erb assumes that 'needs_install_passenger?' is always true. If it is not the case, please review the logic in that file and modify things appropriately."
end
%>

<%=
result = {}
output = render_partial("/walkthroughs/deploy/deploy_app/preamble.md", locals: locals.merge(result: result))
header_step = result[:header_step]
output
%>

<%
header_step += 1
substep = 0
%>
<%= h2(id_prefix, "#{header_step} Configuring Nginx and Passenger") %>

Now that you are done with transferring your app's code to the server and setting up an environment for your app, it is time to configure Nginx so that Passenger knows how to serve your app.

<% if language_type == :ruby %>
  <% substep += 1 %>
  <% determine_ruby_substep = substep %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Determine the Ruby command that Passenger should use") %>

  <p>
    We need to tell Passenger which Ruby command it should use to run your app, just in case there are multiple Ruby interpreters on your system. Please run <code>passenger-config about ruby-command</code> to find out which Ruby interpreter you are using. For example:
  </p>
  <pre class="highlight"><span class="prompt">$ </span><%= passenger_command_prefix(locals) %>passenger-config about ruby-command
<span class="output">passenger-config was invoked through the following Ruby interpreter:
  Command: /usr/local/rvm/gems/ruby-<%= LATEST_RUBY_VERSION %>/wrappers/ruby
  Version: ruby <%= LATEST_RUBY_VERSION %>p85 (2015-02-26 revision 49769) [x86_64-linux]
  ...</span></pre>

  Please take note of the path after "Command" (in this example, `/usr/local/rvm/gems/ruby-<%= LATEST_RUBY_VERSION %>/wrappers/ruby`). You will need it in one of the next steps.
<% end %>

<% if needs_login_as_app_user_to_prepare_environment?(locals) %>
<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Go back to the admin account") %>

You have previously logged into your app's user account in order to prepare the app's environment. That user does not have sudo access. In the next steps, you need to edit configuration files, for which sudo access is needed. So you need to switch back to the admin account.

This can be done by simply exiting the shell that was logged into the app's user account. You will then be dropped back to the admin account. For example:

<pre class="highlight"><span class="c"># This is what you previously ran:</span>
<span class="output">admin$ sudo -u myappuser -H bash -l
myappuser$ ...</span>

<span class="c"># Type `exit` to go back to the account you were before</span>
<span class="prompt">myappuser$ </span>exit
<span class="prompt">admin$</span> _</pre>
<% end %>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Edit Nginx configuration file") %>

<% if os_config_class == :debian || os_config_class == :redhat %>
  <p>
    We need to create an Nginx configuration file and setup a virtual host entry that points to your app. This virtual host entry tells Nginx (and Passenger) where your app is located.
  </p>
  <div>
    <% if os_config_class == :debian %>
      <pre class="highlight"><span class="prompt">$ </span>sudo nano /etc/nginx/sites-enabled/<span class="o">myapp</span>.conf</pre>
    <% else %>
      <pre class="highlight"><span class="prompt">$ </span>sudo nano /etc/nginx/conf.d/<span class="o">myapp</span>.conf</pre>
    <% end %>
  </div>
  <p>
    Replace <code>myapp</code> with your app's name.
  </p>
  <p>
    Put this inside the file:
  </p>
<% else %>
  <p>
    We need to edit your Nginx configuration file and setup a virtual host entry that points to your app. This virtual host entry tells Nginx (and Passenger) where your app is located.
  </p>
  <p>
    The location of the Nginx configuration file depends on <a href="install_passenger.html#using_nginx">the Nginx installation prefix you chose while installing Passenger</a>. Assuming you installed Nginx to the default prefix <code>/opt/nginx</code>, you need to open /opt/nginx/conf/nginx.conf:
  </p>
  <pre class="highlight"><span class="prompt">$ </span>sudo nano /opt/nginx/conf/nginx.conf</pre>
  <p>
    Let us add a virtual host entry at the end of that file. At the end of the file, insert:
  </p>
<% end %>

<% if language_type == :ruby %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    passenger_ruby <span class="o">/path-to-ruby</span>;
}</pre>

  Replace `yourserver.com` with your server's host name, and replace `/var/www/myapp/code` with your application's code directory path. However, make sure that Nginx is configured to point to the `public` subdirectory inside it!

  Replace `/path-to-ruby` with the Ruby command that you obtained in [step <%= header_step %>.<%= determine_ruby_substep %>](#<%= id_prefix %>determine-the-ruby-command-that-passenger-should-use).
<% elsif language_type == :python %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    passenger_python <span class="o">/path-to-python</span>;
}</pre>

  Replace `yourserver.com` with your server's host name, and replace `/var/www/myapp/code` with your application's code directory path. However, make sure that Nginx is configured to point to the `public` subdirectory inside it!

  Replace `/path-to-python` with the location of the Python executable for the version with which the app was built. This is likely to be the folder containing the virtual environment.
<% elsif language_type == :nodejs %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is a Node.js app</span>
    passenger_app_type node;
    passenger_startup_file <span class="o">app.js</span>;
}</pre>

  Replace `yourserver.com` with your server's host name, replace `/var/www/myapp/code` with your application's code directory path and replace `app.js` with your app's entry point file.
<% elsif language_type == :meteor %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/bundle</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is a Meteor app</span>
    passenger_app_type node;
    passenger_startup_file main.js;

    <span class="c"># Tell your app where MongoDB is</span>
    passenger_env_var MONGO_URL mongodb://localhost:27017/<span class="o">myappdb</span>;
    <span class="c"># Tell your app what its root URL is</span>
    passenger_env_var ROOT_URL <span class="o">http://yourserver.com</span>;
}</pre>

  Replace `yourserver.com` with your server's host name and replace `/var/www/myapp/bundle` with your application's package directory path. Replace `myappdb` with an appropriate MongoDB database name. Also be sure to set `ROOT_URL` to an appropriate value.
<% else %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
}</pre>

  Replace `yourserver.com` with your server's host name, and replace `/var/www/myapp/code` with your application's code directory path. However, make sure that Nginx is configured to point to the `public` subdirectory inside it!
<% end %>

When you are done, restart Nginx:

<% if os_config_class == :debian || os_config_class == :redhat %>
  <pre class="highlight"><span class="prompt">$ </span>sudo service nginx restart</pre>
<% else %>
  <pre class="highlight"><span class="prompt">$ </span>sudo <span class="nb">kill</span> <span class="k">$(</span>cat /opt/nginx/logs/nginx.pid<span class="k">)</span>
<span class="prompt">$ </span>sudo /opt/nginx/sbin/nginx</pre>
  <p>(<a href="install_passenger.html#restarting_nginx">Learn more about restarting Nginx</a>)</p>
<% end %>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Test drive") %>

You should now be able to access your app through the server's host name! Try running this from your local computer. Replace `yourserver.com` with your server's hostname, exactly as it appears in the Nginx config file's `server_name` directive.

<pre class="highlight"><span class="prompt">$ </span>curl http://yourserver.com/
<span class="output">...your app's front page HTML...</span></pre>

If you do not see your app's front page HTML, then these are the most likely causes:

1. You did not correctly configure your `server_name` directive. The `server_name` must exactly match the host name in the URL. For example, if you use the command `curl http://45.55.91.235/` to access your app, then the `server_name` must be `45.55.91.235`.
2. You did not setup DNS records. Setting up DNS is outside the scope of this tutorial. In the mean time, we recommend that you use your server's IP address as the server name.
