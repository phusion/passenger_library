<%
web_framework ||= nil
id_prefix = locals[:id_prefix]
header_step = 0

if edition_type == :oss
  gem_name = "passenger"
else
  gem_name = "passenger-enterprise-server"
end

if language_type == :meteor
  app_dirname = "bundle"
else
  app_dirname = "code"
end
%>

<% if language_type == :ruby && (integration_mode_type == :standalone || web_framework == :rails) %>
<!-- Section: Update your gem bundle -->

<% header_step += 1 %>
<% if web_framework == "rails" %>
  <%= h2(id_prefix, "#{header_step} Update your gem bundle") %>

  We need to ensure that "<%= gem_name %>" is in your Gemfile.

  Your Rails app needs a database in production. For demonstration purposes, this tutorial uses sqlite as database because it's the easiest to setup. So we need to ensure that "sqlite3" is in the Gemfile.
<% else %>
  <%= h2(id_prefix, "#{header_step} Add \"#{gem_name}\" to your gem bundle") %>

  We need to ensure that "<%= gem_name %>" is in your Gemfile.
<% end %>

<% if edition_type == :enterprise %>
  <%=
  result2 = {}
  output = render_partial("/install/install/shared/enterprise_preamble.html",
    locals: locals.merge(result: result2, heading_level: 3, step_format: "#{header_step}.%s"))
  substep = result2[:step]
  output
  %>

  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Edit Gemfile and commit") %>
<% end %>

On your local computer, open your app's Gemfile. Remove lines that look like one of these:

~~~ruby
gem "unicorn"
gem "thin"
gem "puma"
~~~

<% if web_framework == "rails" %>
Make sure the following lines exists:

~~~ruby
<% if edition_type == :enterprise -%>
source "https://download:#{your_download_token}@www.phusionpassenger.com/enterprise_gems"
<% end -%>
gem "<%= gem_name %>"
gem "sqlite3"
~~~

Note that the `sqlite3` gem may be located inside a `development` group, like this:

~~~ruby
group :development do
  gem "sqlite3"
end

# -OR-

gem "sqlite3", groups: [:development]
~~~

Since we are going to use sqlite3 in production in this tutorial, we need to ensure that this gem is moved outside the `development` group, like this:

~~~ruby
gem "sqlite3"
~~~
<% else %>
Make sure the following line exists:

~~~ruby
<% if edition_type == :enterprise -%>
source "https://download:#{your_download_token}@www.phusionpassenger.com/enterprise_gems"
<% end -%>
gem "<%= gem_name %>", ">= 5.0.11"
~~~
<% end %>

When you are done, install your gem bundle and commit the changes:

<pre class="highlight"><span class="prompt">$ </span>bundle install
<span class="prompt">$ </span>git commit -a -m "Use Passenger"</pre>
<% end %>

<!-- Section: transferring the app code to the server -->

<%
header_step += 1
substep = 0
%>
<% if language_type == :meteor %>
  <%= h2(id_prefix, "#{header_step} Transferring the Meteor package to the server") %>

  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Build package") %>

  <p>
    To deploy your Meteor app to production, we need to create a <em>packaged</em> version of it. A packaged Meteor app contains the Meteor runtime and various other necessary things for running a Meteor app in production.
  </p>

  <p>
    In order to provide you appropriate instructions, please choose your Meteor version: <%= render_partial("/shared/meteor_picker.html") %>
  </p>
  <p>
    Inside your application's code directory, on your local computer, use the <code class="meteor v13">meteor bundle</code><code class="meteor v14 v16">meteor build</code> command to create a Meteor package tarball.
  </p>

  <pre class="highlight meteor v13"><span class="prompt">$ </span>meteor bundle package.tar.gz</pre>
  <pre class="highlight meteor v14 v16"><span class="prompt">$ </span>meteor build --server-only ../new_package && mv ../new_package/*.tar.gz package.tar.gz</pre>

<%= render_partial("/shared/meteor_package_note.html") %>

  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Upload package to the server") %>

  <p>
    Copy the package to your production server, for example using <code>scp</code>:
  </p>

  <div>
  <% if locals[:infrastructure_type] == :aws %>
    <pre class="highlight"><span class="prompt">local-computer$ </span>scp -i <span class="o">your_ec2_key.pem</span> package.tar.gz <span class="o">adminuser</span>@yourserver.com:</pre>
  <% else %>
    <pre class="highlight"><span class="prompt">local-computer$ </span>scp package.tar.gz <span class="o">adminuser</span>@yourserver.com:</pre>
  <% end %>
  </div>

  <p>
    Replace <code>adminuser</code> with the name of an account with administrator privileges or sudo privileges.
    <% if infrastructure_type == :aws -%>
      This is usually <code>admin</code>, <code>ec2-user</code>, <code>root</code> or <code>ubuntu</code>.
    <% end %>
  </p>
<% else %>
  <%= h2(id_prefix, "#{header_step} Transferring the app code to the server") %>

  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Push your code to a Git repository") %>

  <div class="note">
    If you are using our <a href="<%= url_for "/walkthroughs/start/#{language_type}.html" %>#preparing-the-example-application">sample app</a>, you can <a href="#<%= id_prefix %>login-to-your-server-create-a-user-for-the-app">skip to the next step</a>.
  </div>

  <p>
    We want to transfer our application's code to the server. The easiest way to do that is via Git.
  </p>

  <p>
    If you have already setup a Git repository, push your application's code to that repository by running this on your local computer:
  </p>

  <pre class="highlight"><span class="prompt">$ </span>git push</pre>

  <p>
    If you have not already setup a Git repository, go to <a href="https://github.com/">Github</a>, create a repository and push your application's code there.
  </p>
<% end %>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Login to your server, create a user for the app") %>

Login to your server with SSH:

<% if infrastructure_type == :aws %>
  <pre class="highlight"><span class="prompt">$ </span>ssh -i <span class="o">your_ec2_key.pem</span> <span class="o">adminuser</span>@yourserver.com</pre>
<% else %>
  <pre class="highlight"><span class="prompt">$ </span>ssh <span class="o">adminuser</span>@yourserver.com</pre>
<% end %>

Replace `adminuser` with the name of an account with administrator privileges or sudo privileges.
<% if infrastructure_type == :aws -%>
  This is usually `admin`, `ec2-user`, `root` or `ubuntu`.
<% end %>

<div class="alert alert-info">Starting from this point, unless stated otherwise, all commands that we instruct you to run should be run on the server, not on your local computer!</div>

Now that you have logged in, you should create an operating system user account for your app. For security reasons, it is a good idea to run each app under its own user account, in order to limit the damage that security vulnerabilities in the app can do. Passenger will automatically run your app under this user account as part of its [user account sandboxing feature](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>).

You should give the user account the same name as your app. But for demonstration purposes, this tutorial names the user account `myappuser`.

<pre class="highlight"><span class="prompt">$ </span>sudo adduser <span class="o">myappuser</span></pre>

We also ensure that that user has your SSH key installed:

<pre class="highlight"><span class="prompt">$ </span>sudo mkdir -p ~<span class="o">myappuser</span>/.ssh
<span class="prompt">$ </span>touch $HOME/.ssh/authorized_keys
<span class="prompt">$ </span>sudo sh -c <span class="s">"cat $HOME/.ssh/authorized_keys &gt;&gt; ~<span class="o">myappuser</span>/.ssh/authorized_keys"</span>
<span class="prompt">$ </span>sudo chown -R <span class="o">myappuser:</span> ~<span class="o">myappuser</span>/.ssh
<span class="prompt">$ </span>sudo chmod <span>700</span> ~<span class="o">myappuser</span>/.ssh
<span class="prompt">$ </span>sudo sh -c <span class="s">"chmod <span>600</span> ~<span class="o">myappuser</span>/.ssh/*"</span></pre>

<% if language_type == :meteor -%>
  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Extract package") %>

  <p>
    You need extract the package to a permanent location on the server. A good location is <code>/var/www/APP_NAME</code>. Let us create that directory.
  </p>

  <pre class="highlight"><span class="prompt">$ </span>sudo mkdir -p /var/www/<span class="o">myapp</span></pre>

  <p>
    Replace <code>myapp</code> and <code>myappuser</code> with your app's name and your app user account's name.
  </p>

  <p>
    Now let us extract the package:
  </p>

  <pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>
<span class="prompt">$ </span>tar xzf <span class="o">~/package.tar.gz</span>
<span class="prompt">$ </span>chown -R <span class="o">myappuser</span>: .</pre>

  <p>
    Your extract app package directory now lives on the server at <code>/var/www/myapp/bundle</code>.
  </p>
<% else -%>
  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Install Git on the server") %>

  <div>
    <% if locals[:os_config_class] == :debian %>
      <pre class="highlight"><span class="prompt">$ </span>sudo apt-get install -y git</pre>
    <% elsif locals[:os_config_class] == :redhat %>
      <pre class="highlight"><span class="prompt">$ </span>sudo yum install -y git</pre>
    <% elsif locals[:os_config_class].nil? %>
      <table class="table table-bordered table-striped">
        <tr>
          <td>Debian, Ubuntu</td>
          <td><pre class="highlight">sudo apt-get install -y git</pre></td>
        </tr>
        <tr>
          <td>Red Hat, CentOS, Fedora, Scientific Linux, Amazon Linux</td>
          <td><pre class="highlight">sudo yum install -y git</pre></td>
        </tr>
        <tr>
          <td>Other operating systems</td>
          <td>Please install Git from <a href="https://git-scm.com/">git-scm.com</a>.</td>
        </tr>
      </table>
    <% else%>
      Please install Git from <a href="https://git-scm.com/">git-scm.com</a>.
    <% end %>
  </div>

  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Pull code") %>

  <p>
    You need to pick a location in which to permanently store your application's code. A good location is <code>/var/www/APP_NAME</code>. Let us create that directory.
  </p>

  <pre class="highlight"><span class="prompt">$ </span>sudo mkdir -p /var/www/<span class="o">myapp</span>
<span class="prompt">$ </span>sudo chown <span class="o">myappuser</span>: /var/www/<span class="o">myapp</span></pre>

  <p>
    Replace <code>myapp</code> and <code>myappuser</code> with your app's name and your app user account's name.
  </p>

  <p>
    Now let us pull the code from Git:
  </p>

  <pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>
<span class="prompt">$ </span>sudo -u <span class="o">myappuser</span> -H git clone <span class="o">git://github.com/username/myapp.git</span> code</pre>

  <div class="info">
    <p>If you are using our <a href="<%= url_for "/walkthroughs/start/#{language_type}.html" %>#preparing-the-example-application">sample app</a>, use this Git clone command instead:</p>
    <% git_url, branch = deployment_walkthrough_sample_app_git_url(locals) %>
    <pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>
<span class="prompt">$ </span>sudo -u <span class="o">myappuser</span> -H git clone --branch=<%= branch %> <%= git_url %> code</pre>
  </div>

  <p>
    Your app's code now lives on the server at <code>/var/www/myapp/code</code>.
  </p>
<% end %>


<!-- Section: Preparing the app's environment -->

<%
header_step += 1
substep = 0
%>
<%= h2(id_prefix, "#{header_step} Preparing the app's environment") %>

<% if language_type == :meteor %>
  <% substep += 1 %>
  <%= h3(id_prefix, "#{header_step}.#{substep} Install MongoDB") %>

  <p>
    During development, the Meteor runtime takes care of starting MongoDB for you. MongoDB is the database engine that Meteor uses. But a packaged Meteor app does not start MongoDB for you. Instead, a packaged Meteor app expects that MongoDB is already running somewhere, and that you tell the app where that MongoDB instance is.
  </p>
  <div>
    <p>
      You can install MongoDB from <a href="http://www.mongodb.org/" target="_blank">www.mongodb.org</a>.
    <% if os_config_class == :debian %>
      While you can also install MongoDB via a package manager (apt-get), please note that this might be an outdated or even unsupported version.
    <% elsif os_config_class == :redhat %>
      While you can also install MongoDB via a package manager (yum), please note that this might be an outdated or even unsupported version.
    <% end %>
    </p>
  </div>
  <div class="alert alert-info">
    See also: <a href="https://docs.mongodb.com/master/administration/security-checklist/">mongoDB security checklist</a> (notably the bindIp).
  </div>
<% end %>

<% if needs_login_as_app_user_to_prepare_environment?(locals) %>
<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Login as the app's user") %>

All subsequent instructions must be run under the application's user account. While logged into your server, login under the application's user account as follows:

<pre class="highlight"><span class="prompt">$ </span>sudo -u <span class="o">myappuser</span> -H bash -l</pre>

<% if language_type == :ruby %>
  <div class="app_details app_details_rvm">
    <p>
      Since you are using RVM, make sure that you activate the Ruby version that you want to run your app under. For example:
    </p>
    <pre class="highlight"><span class="prompt">$ </span>rvm use ruby-<%= LATEST_RUBY_VERSION %></pre>
  </div>
<% end %>
<% end %>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Install app dependencies") %>

Your application has various dependencies.
<% if language_type == :ruby -%>
They must be installed. Most of these dependencies are gems in your Gemfile, managed by Bundler. You can install them by running `bundle install --deployment --without development test -j 2` in your app's directory:

<pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/code
<span class="prompt">$ </span>bundle install --deployment --without development test</pre>

Your app may also depend on services, such as PostgreSQL, Redis, etc. Installing services that your app depends on is outside of this tutorial's scope.
<% elsif language_type == :python -%>
They must be installed. Most of these dependencies are Python libraries. A common way to install Python libraries is through `pip`. For example, if your application depends on Flask:

<pre class="highlight"><span class="prompt">$ </span>sudo pip install flask</pre>

Your app may also depend on services, such as PostgreSQL, Redis, etc. Installing services that your app depends on is outside of this tutorial's scope.
<% elsif language_type == :nodejs %>
They must be installed. Most of these dependencies are Javascript libraries, managed by npm. You can install them by running `npm install` in your app's directory:

<pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/code
<span class="prompt">$ </span>npm install --production</pre>

Your app may also depend on services, such as PostgreSQL, Redis, etc. Installing services that your app depends on is outside of this tutorial's scope.
<% elsif language_type == :meteor %>
They must be installed. Most of these dependencies are Javascript libraries, managed by npm. You can install them by running `npm install` in your app's package directory, under the `programs/server` subdirectory:

<pre class="highlight"><span class="prompt">$ </span>cd /var/www/<span class="o">myapp</span>/bundle/programs/server
<span class="prompt">$ </span>npm install --production</pre>

Your app may also depend on services, such as Redis etc. With the exception of MongoDB, installing services that your app depends on is outside of this tutorial's scope.
<% else -%>
Please install them now, before Passenger is started.

How to install your app's dependencies is an application-specific procedure, so it is outside this tutorial's scope.
<% end %>

<% if web_framework == "rails" %>
<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Configure database.yml and secrets.yml") %>

Since your Rails app probably needs a database, you need to edit config/database.yml. For demonstration purposes, we will setup your app with an SQLite database because that is the easiest.

Open the file:

<pre class="highlight"><span class="prompt">$ </span>nano config/database.yml</pre>

Ensure that the `production` section looks like this:

~~~yaml
production:
  adapter: sqlite3
  database: db/production.sqlite3
~~~

Rails also needs a unique secret key with which to encrypt its sessions. Starting from Rails 4, this secret key is stored in config/secrets.yml. But first, we need to generate a secret key. Run:

<pre class="highlight"><span class="prompt">$ </span>bundle exec rake secret
<span class="output">...</span></pre>

This command will output a secret key. Copy that value to your clipboard. Next, open config/secrets.yml:

<pre class="highlight"><span class="prompt">$ </span>nano config/secrets.yml</pre>

If the file already exists, look for this:

~~~yaml
production:
  secret_key_base: <%= "<" + "%=" %>ENV["SECRET_KEY_BASE"]<%= "%" + ">" %>
~~~

Then replace it with the following. If the file didn't already exist, simply insert the following.

<pre class="highlight"><span class="s">production</span><span class="pi">:</span>
  <span class="s">secret_key_base</span><span class="pi">:</span> <span class="o">the value that you copied from 'rake secret'</span></pre>

To prevent other users on the system from reading sensitive information belonging to your app, let's tighten the security on the configuration directory and the database directory:

<pre class="highlight"><span class="prompt">$ </span>chmod 700 config db
<span class="prompt">$ </span>chmod 600 config/database.yml config/secrets.yml</pre>

<% substep += 1 %>
<%= h3(id_prefix, "#{header_step}.#{substep} Compile Rails assets and run database migrations") %>

Run the following command to compile assets for the Rails asset pipeline, and to run database migrations:

<pre class="highlight"><span class="prompt">$ </span>bundle exec rake assets:precompile db:migrate RAILS_ENV=production</pre>
<% end %>

<%
result ||= {}
result[:header_step] = header_step
result[:substep] = substep
%>
